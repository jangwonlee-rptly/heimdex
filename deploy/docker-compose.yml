services:
  pg:
    image: postgres:17-alpine
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${PGUSER}
      POSTGRES_PASSWORD: ${PGPASSWORD}
      POSTGRES_DB: ${PGDATABASE}
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PGUSER}"]
      interval: 5s
      timeout: 2s
      retries: 5
      start_period: 10s
    networks:
      - heimdex

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 2s
      retries: 5
    networks:
      - heimdex

  api:
    build:
      context: ..
      dockerfile: apps/api/Dockerfile
    env_file:
      - .env
    command:
      - uvicorn
      - heimdex_api.main:app
      - --host
      - 0.0.0.0
      - --port
      - "8000"
    ports:
      - "8000:8000"
    depends_on:
      pg:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8000/healthz"]
      interval: 5s
      timeout: 2s
      retries: 5
      start_period: 10s
    networks:
      - heimdex

  worker:
    build:
      context: ..
      dockerfile: apps/worker/Dockerfile
    env_file:
      - .env
    command: ["dramatiq", "heimdex_worker.tasks", "--processes", "1", "--threads", "2"]
    depends_on:
      pg:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f dramatiq || exit 1"]
      interval: 10s
      timeout: 2s
      retries: 3
    networks:
      - heimdex

volumes:
  pg_data:
  redis_data:

networks:
  heimdex:
    driver: bridge
