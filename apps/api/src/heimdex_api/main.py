"""
Entrypoint for the Heimdex API Service.

This module initializes the FastAPI application, registers routers, and sets up
middleware for logging and request handling. It also defines the health and
readiness check endpoints.

The application startup and shutdown events are handled here to manage the
application lifecycle, including logging and database connection setup.
"""

from __future__ import annotations

import os
import time
from collections.abc import Awaitable, Callable
from datetime import UTC, datetime

from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse, Response

from . import SERVICE_NAME, __version__
from .jobs import router as jobs_router
from .logger import log_event

_ENV = os.getenv("HEIMDEX_ENV", "local")
_STARTED_AT = datetime.now(UTC)
_STARTED_AT_ISO = _STARTED_AT.isoformat()

app = FastAPI(title="Heimdex API", version=__version__)
app.include_router(jobs_router)


@app.on_event("startup")
async def on_startup() -> None:
    """
    Handles application startup events.

    This function is executed when the FastAPI application starts. It performs
    the following actions:
    1.  Loads the application configuration using `get_config`.
    2.  Logs a structured startup message, including the environment, start
        time, and a redacted summary of the configuration for security.

    This is the appropriate place to initialize resources that should exist
    for the lifetime of the application, such as database connection pools.
    """
    from heimdex_common.config import get_config

    config = get_config()
    log_event(
        "INFO",
        "starting",
        env=_ENV,
        started_at=_STARTED_AT_ISO,
        config=config.log_summary(redact_secrets=True),
    )


@app.on_event("shutdown")
async def on_shutdown() -> None:
    """
    Handles application shutdown events.

    This function is executed when the FastAPI application is shutting down.
    It logs a simple 'stopping' message to indicate that the service is
    terminating gracefully. This is useful for monitoring and debugging
    service lifecycle events.
    """
    log_event("INFO", "stopping")


@app.middleware("http")
async def request_logger(
    request: Request, call_next: Callable[[Request], Awaitable[Response]]
) -> Response:
    """
    Logs incoming HTTP requests and their processing time.

    This FastAPI middleware intercepts every incoming request. It records the
    time before passing the request to the next handler and then calculates
    the total processing duration after the response is generated.

    The log entry includes the HTTP method, URL path, status code, and the
    duration in milliseconds.

    Args:
        request (Request): The incoming FastAPI request object.
        call_next (Callable[[Request], Awaitable[Response]]): A function that
            passes the request to the next middleware or endpoint in the chain.

    Returns:
        Response: The response generated by the endpoint, which is passed
            through the middleware chain.
    """
    start = time.perf_counter()
    response = await call_next(request)
    duration_ms = (time.perf_counter() - start) * 1000
    log_event(
        "INFO",
        "request",
        method=request.method,
        path=request.url.path,
        status_code=response.status_code,
        duration_ms=round(duration_ms, 2),
    )
    return response


@app.get("/healthz", response_class=JSONResponse)
async def healthz() -> JSONResponse:
    """
    Performs a basic health check.

    This endpoint provides a simple, fast way to verify that the API service
    is running and responsive. It returns a JSON response with the service's
    status, version, environment, and start time.

    This endpoint does not check the status of external dependencies like the
    database or message queue. For a comprehensive check, use the `/readyz`
    endpoint.

    Returns:
        JSONResponse: A JSON response containing the health check information,
            including a `{"ok": True}` status.
    """
    payload = {
        "ok": True,
        "service": SERVICE_NAME,
        "version": __version__,
        "env": _ENV,
        "started_at": _STARTED_AT_ISO,
    }
    return JSONResponse(content=payload)


@app.get("/readyz", response_class=JSONResponse)
async def readyz() -> JSONResponse:
    """
    Performs a profile-aware readiness check with dependency probes.

    This endpoint is used to determine if the service is ready to accept
    traffic. It checks the status of all critical, enabled dependencies, such
    as the database and Redis. The check is profile-aware, meaning it only
    probes dependencies that are enabled via the `ENABLE_*` configuration flags.

    If all enabled dependencies are healthy, it returns a 200 OK response.
    If any enabled dependency is down, it returns a 503 Service Unavailable
    response, signaling to orchestration systems (like Kubernetes) that the
    service is not ready.

    Returns:
        JSONResponse: A detailed JSON response with the readiness status of
            the service and each of its dependencies. The HTTP status code
            will be 200 if ready, and 503 if not.
    """
    from heimdex_common.probes import check_readiness

    result = check_readiness(service=SERVICE_NAME, version=__version__)
    status_code = 200 if result["ready"] else 503
    return JSONResponse(content=result, status_code=status_code)
