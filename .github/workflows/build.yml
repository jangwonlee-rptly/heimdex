name: Build and Push

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      tag:
        description: 'Image tag (default: git sha)'
        required: false
        type: string

permissions:
  contents: read
  id-token: write

env:
  REGISTRY_REGION: us-central1
  REGISTRY_NAME: heimdex

jobs:
  build-api:
    name: Build API Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine image tag
        id: tag
        run: |
          if [ -n "${{ inputs.tag }}" ]; then
            echo "tag=${{ inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.REGISTRY_REGION }}-docker.pkg.dev

      - name: Build API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/api/Dockerfile
          push: false
          tags: |
            ${{ env.REGISTRY_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.REGISTRY_NAME }}/api:${{ steps.tag.outputs.tag }}
            ${{ env.REGISTRY_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.REGISTRY_NAME }}/api:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true

      - name: Scan API image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.REGISTRY_NAME }}/api:${{ steps.tag.outputs.tag }}'
          format: 'sarif'
          output: 'trivy-api-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'

      - name: Push API image
        run: |
          docker push ${{ env.REGISTRY_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.REGISTRY_NAME }}/api:${{ steps.tag.outputs.tag }}
          docker push ${{ env.REGISTRY_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.REGISTRY_NAME }}/api:latest

      - name: Output API image digest
        id: digest
        run: |
          DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' ${{ env.REGISTRY_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.REGISTRY_NAME }}/api:${{ steps.tag.outputs.tag }})
          echo "digest=$DIGEST" >> $GITHUB_OUTPUT
          echo "::notice ::API image: $DIGEST"

    outputs:
      tag: ${{ steps.tag.outputs.tag }}
      digest: ${{ steps.digest.outputs.digest }}

  build-worker:
    name: Build Worker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine image tag
        id: tag
        run: |
          if [ -n "${{ inputs.tag }}" ]; then
            echo "tag=${{ inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.REGISTRY_REGION }}-docker.pkg.dev

      - name: Build Worker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/worker/Dockerfile
          push: false
          tags: |
            ${{ env.REGISTRY_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.REGISTRY_NAME }}/worker:${{ steps.tag.outputs.tag }}
            ${{ env.REGISTRY_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.REGISTRY_NAME }}/worker:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true

      - name: Scan Worker image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.REGISTRY_NAME }}/worker:${{ steps.tag.outputs.tag }}'
          format: 'sarif'
          output: 'trivy-worker-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'

      - name: Push Worker image
        run: |
          docker push ${{ env.REGISTRY_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.REGISTRY_NAME }}/worker:${{ steps.tag.outputs.tag }}
          docker push ${{ env.REGISTRY_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.REGISTRY_NAME }}/worker:latest

      - name: Output Worker image digest
        id: digest
        run: |
          DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' ${{ env.REGISTRY_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.REGISTRY_NAME }}/worker:${{ steps.tag.outputs.tag }})
          echo "digest=$DIGEST" >> $GITHUB_OUTPUT
          echo "::notice ::Worker image: $DIGEST"

    outputs:
      tag: ${{ steps.tag.outputs.tag }}
      digest: ${{ steps.digest.outputs.digest }}

  # Deploy job (disabled for now - will be enabled later)
  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: [build-api, build-worker]
    if: false # Disabled - enable when ready to deploy

    steps:
      - name: Deploy placeholder
        run: |
          echo "::notice ::Deploy job disabled. Enable manually when ready."
          echo "API image: ${{ needs.build-api.outputs.digest }}"
          echo "Worker image: ${{ needs.build-worker.outputs.digest }}"
